import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Données du portefeuille (converties en GBP pour uniformité)
portfolio_data = {
    'Investment': [
        'AMUNDI MSCI SEMICONDUCTORS',
        '3I Group PLC',
        'Invesco MSCI World',
        'UBS US Growth',
        'UBS S&P 500 Index',
        'HSBC MSCI WORLD',
        'Vanguard S&P 500',
        'SPDR MSCI WORLD TECHNOLOGY',
        'L&G Global Technology',
        'Fidelity Global Tech',
        'X MSCI WORLD MIN VOLATILITY',
        'Ashoka India Equity',
        'X MSCI WORLD INF TECH',
        'Barclays GA Japan',
        'Jupiter India',
        'SPDR MSCI World Industrials',
        'FIRSTTRUST US EQUITY OPPORTUNITIES',
        'L&G ISE CYBER SECURITY',
        'X NIKKEI 225',
        'X MSCI NORDIC'
    ],
    'Ticker': [
        'SEMG', 'III', 'MXWO', 'GB00B7VHZX64', 'GB00BMN91T34',
        'HMWO', 'VUSA', 'WTEC', 'GB00B0CNH163', 'LU0936579340',
        'XDEB', 'AIE', 'XDWT', 'IE00B5WCL830', 'GB00B4TZHH95',
        'WNDU', 'FPX', 'USPY', 'XDJP', 'XDN0'
    ],
    'Value_GBP': [
        583.55, 533.26, 520.0, 474.54, 421.53, 409.52, 369.12,
        324.0, 294.67, 280.0, 291.28, 276.04, 259.0, 234.73,
        191.94, 195.0, 174.32, 148.0, 137.64, 122.55
    ],
    'Sector': [
        'Technology', 'Private Equity', 'Global Equity', 'US Growth', 'US Large Cap',
        'Global Equity', 'US Large Cap', 'Technology', 'Technology', 'Technology',
        'Low Volatility', 'India Equity', 'Technology', 'Japan Equity', 'India Equity',
        'Industrials', 'US Equity', 'Cybersecurity', 'Japan Equity', 'Nordic Equity'
    ],
    'Geography': [
        'Global', 'UK', 'Global', 'US', 'US',
        'Global', 'US', 'Global', 'Global', 'Global',
        'Global', 'India', 'Global', 'Japan', 'India',
        'Global', 'US', 'Global', 'Japan', 'Nordic'
    ]
}

df = pd.DataFrame(portfolio_data)
total_value = df['Value_GBP'].sum()
df['Weight_%'] = (df['Value_GBP'] / total_value * 100).round(2)

print(f"Valeur totale du portefeuille: £{total_value:,.2f}")
print(f"Nombre de positions: {len(df)}")

# Configuration des graphiques
plt.style.use('default')
fig = plt.figure(figsize=(16, 12))
fig.suptitle('RAPPORT PORTEFEUILLE BARCLAYS - ANALYSE COMPLÈTE', fontsize=16, fontweight='bold')

# 1. Top 10 Holdings
ax1 = plt.subplot(2, 3, 1)
top10 = df.nlargest(10, 'Value_GBP')
colors1 = plt.cm.Set3(np.linspace(0, 1, len(top10)))
bars1 = ax1.barh(range(len(top10)), top10['Value_GBP'], color=colors1)
ax1.set_yticks(range(len(top10)))
ax1.set_yticklabels([f"{ticker}\n({weight:.1f}%)" for ticker, weight in zip(top10['Ticker'], top10['Weight_%'])], fontsize=8)
ax1.set_xlabel('Valeur (GBP)')
ax1.set_title('Top 10 Holdings', fontweight='bold')
ax1.grid(axis='x', alpha=0.3)

# 2. Répartition sectorielle
ax2 = plt.subplot(2, 3, 2)
sector_allocation = df.groupby('Sector')['Value_GBP'].sum().sort_values(ascending=False)
colors2 = plt.cm.Set2(np.linspace(0, 1, len(sector_allocation)))
wedges2, texts2, autotexts2 = ax2.pie(sector_allocation.values, labels=sector_allocation.index, 
                                      autopct='%1.1f%%', colors=colors2, textprops={'fontsize': 8})
ax2.set_title('Répartition Sectorielle', fontweight='bold')

# 3. Répartition géographique
ax3 = plt.subplot(2, 3, 3)
geo_allocation = df.groupby('Geography')['Value_GBP'].sum().sort_values(ascending=False)
colors3 = plt.cm.Pastel1(np.linspace(0, 1, len(geo_allocation)))
wedges3, texts3, autotexts3 = ax3.pie(geo_allocation.values, labels=geo_allocation.index,
                                      autopct='%1.1f%%', colors=colors3, textprops={'fontsize': 8})
ax3.set_title('Répartition Géographique', fontweight='bold')

# 4. Distribution des poids
ax4 = plt.subplot(2, 3, 4)
weight_ranges = ['<2%', '2-4%', '4-6%', '6-8%', '>8%']
weight_counts = [
    len(df[df['Weight_%'] < 2]),
    len(df[(df['Weight_%'] >= 2) & (df['Weight_%'] < 4)]),
    len(df[(df['Weight_%'] >= 4) & (df['Weight_%'] < 6)]),
    len(df[(df['Weight_%'] >= 6) & (df['Weight_%'] < 8)]),
    len(df[df['Weight_%'] >= 8])
]
colors4 = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc']
bars4 = ax4.bar(weight_ranges, weight_counts, color=colors4)
ax4.set_ylabel('Nombre de positions')
ax4.set_title('Distribution des Poids', fontweight='bold')
ax4.grid(axis='y', alpha=0.3)

# 5. Concentration du portefeuille
ax5 = plt.subplot(2, 3, 5)
df_sorted = df.sort_values('Weight_%', ascending=False)
cumulative_weights = df_sorted['Weight_%'].cumsum()
ax5.plot(range(1, len(df_sorted)+1), cumulative_weights, 'o-', linewidth=2, markersize=4)
ax5.axhline(y=50, color='red', linestyle='--', alpha=0.7, label='50%')
ax5.axhline(y=80, color='orange', linestyle='--', alpha=0.7, label='80%')
ax5.set_xlabel('Nombre de positions')
ax5.set_ylabel('Poids cumulé (%)')
ax5.set_title('Courbe de Concentration', fontweight='bold')
ax5.grid(True, alpha=0.3)
ax5.legend()

# 6. Tableau récapitulatif des métriques
ax6 = plt.subplot(2, 3, 6)
ax6.axis('off')

# Calcul des métriques
top5_weight = df.nlargest(5, 'Weight_%')['Weight_%'].sum()
top10_weight = df.nlargest(10, 'Weight_%')['Weight_%'].sum()
tech_weight = df[df['Sector'].str.contains('Technology|Tech', case=False, na=False)]['Weight_%'].sum()
us_weight = df[df['Geography'] == 'US']['Weight_%'].sum()
global_weight = df[df['Geography'] == 'Global']['Weight_%'].sum()

metrics_text = f"""
MÉTRIQUES CLÉS

Concentration:
• Top 5 positions: {top5_weight:.1f}%
• Top 10 positions: {top10_weight:.1f}%

Exposition sectorielle:
• Technology: {tech_weight:.1f}%
• Plus gros secteur: {sector_allocation.index[0]} ({sector_allocation.iloc[0]/total_value*100:.1f}%)

Exposition géographique:
• US direct: {us_weight:.1f}%
• Global/Monde: {global_weight:.1f}%
• Plus grosse région: {geo_allocation.index[0]} ({geo_allocation.iloc[0]/total_value*100:.1f}%)

Diversification:
• Nombre total de positions: {len(df)}
• Position moyenne: {100/len(df):.1f}%
• Écart-type des poids: {df['Weight_%'].std():.1f}%
"""

ax6.text(0.05, 0.95, metrics_text, transform=ax6.transAxes, fontsize=10,
         verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))

plt.tight_layout()
plt.show()

# Affichage du tableau détaillé
print("\n" + "="*80)
print("DÉTAIL DES POSITIONS (triées par valeur décroissante)")
print("="*80)
df_display = df.sort_values('Value_GBP', ascending=False)[['Ticker', 'Investment', 'Value_GBP', 'Weight_%', 'Sector', 'Geography']]
for idx, row in df_display.iterrows():
    print(f"{row['Ticker']:15} | £{row['Value_GBP']:8.2f} | {row['Weight_%']:5.1f}% | {row['Sector']:15} | {row['Geography']}")
